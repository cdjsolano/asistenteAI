import React, { useState, useEffect } from 'react';

// Íconos de Lucide React para un aspecto limpio
const Lucide = {
  Github: (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
      <path d="M15 22v-4a4.8 4.8 0 0 0-4.8-4.8H8A4.8 4.8 0 0 0 3.2 18v4" />
      <path d="M12 2a4 4 0 0 1 4 4v2a4 4 0 0 1-4 4" />
      <circle cx="12" cy="12" r="10" />
      <path d="M12 22a10 10 0 0 0 10-10" />
      <path d="M2 12a10 10 0 0 1 10 10" />
    </svg>
  ),
  Link: (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
      <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07L13.5 10.5M4 22l5.5-5.5" />
      <path d="M18 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07L10.5 13.5" />
    </svg>
  ),
  ArrowLeft: (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
      <path d="m12 19-7-7 7-7" />
      <path d="M19 12H5" />
    </svg>
  ),
};

// Configuración de Supabase - Reemplaza con tus propias credenciales
const SUPABASE_URL = "https://aabgzbmiiwhzavaaaamv.supabase.co"; 
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhYmd6Ym1paXdoemF2YWFhYW12Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwMzU1ODYsImV4cCI6MjA3MjYxMTU4Nn0.fUxep78ebSSBxhEDW2ApZZILnXQjUwvLOXi52hBdChE"; 

// --- Componente de la página principal (Home) ---
const Home = ({ developers, goToDeveloper }) => (
  <div className="p-4 sm:p-8">
    <h2 className="text-3xl font-bold text-gray-200 text-center mb-6 sm:mb-10">Explora Desarrolladores</h2>
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {developers.length > 0 ? (
        developers.map((dev) => (
          <div
            key={dev.id}
            className="bg-gray-800 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 cursor-pointer overflow-hidden"
            onClick={() => goToDeveloper(dev)}
          >
            <img
              src={dev.photoUrl}
              alt={dev.name}
              className="w-full h-48 object-cover object-center"
            />
            <div className="p-4">
              <h3 className="text-xl font-semibold text-white text-center">{dev.name}</h3>
            </div>
          </div>
        ))
      ) : (
        <p className="text-center text-gray-400 col-span-full">
          No hay desarrolladores disponibles. Por favor, agrega algunos a la tabla 'developers' en tu base de datos de Supabase.
        </p>
      )}
    </div>
  </div>
);

// --- Componente de detalles del desarrollador ---
const DeveloperDetail = ({ selectedDeveloper, projects, goToHome, goToProject }) => {
  const devProjects = projects.filter(proj => proj.developerId === selectedDeveloper.id);

  return (
    <div className="p-4 sm:p-8">
      <button
        onClick={goToHome}
        className="flex items-center text-blue-400 hover:text-blue-300 transition-colors duration-200 mb-6"
      >
        <Lucide.ArrowLeft className="w-5 h-5 mr-2" />
        Volver a la portada
      </button>
      <div className="bg-gray-800 rounded-xl shadow-lg p-6 sm:p-8 mb-8">
        <div className="flex flex-col sm:flex-row items-center sm:items-start gap-6">
          <img
            src={selectedDeveloper.photoUrl}
            alt={selectedDeveloper.name}
            className="w-32 h-32 rounded-full object-cover shadow-md"
          />
          <div className="text-center sm:text-left">
            <h2 className="text-3xl font-bold text-white">{selectedDeveloper.name}</h2>
            <p className="text-gray-400 mt-2">{selectedDeveloper.bio || 'Desarrollador web enfocado en la creación de aplicaciones dinámicas y modernas.'}</p>
          </div>
        </div>
      </div>

      <h3 className="text-2xl font-bold text-gray-200 mb-6">Portafolio de Proyectos</h3>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {devProjects.length > 0 ? (
          devProjects.map((project) => (
            <div
              key={project.id}
              className="bg-gray-800 rounded-xl shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-shadow duration-300"
              onClick={() => goToProject(project)}
            >
              <img
                src={project.mainImage}
                alt={project.name}
                className="w-full h-48 object-cover object-center"
              />
              <div className="p-4">
                <h4 className="text-lg font-semibold text-white truncate">{project.name}</h4>
                <p className="text-sm text-gray-400">{project.type}</p>
              </div>
            </div>
          ))
        ) : (
          <p className="text-center text-gray-400 col-span-full">Este desarrollador aún no ha agregado proyectos.</p>
        )}
      </div>
    </div>
  );
};

// --- Componente de detalles del proyecto ---
const ProjectDetail = ({ selectedProject, handleBackToDev }) => (
  <div className="p-4 sm:p-8">
    <button
      onClick={handleBackToDev}
      className="flex items-center text-blue-400 hover:text-blue-300 transition-colors duration-200 mb-6"
    >
      <Lucide.ArrowLeft className="w-5 h-5 mr-2" />
      Volver a Proyectos
    </button>

    <div className="bg-gray-800 rounded-xl shadow-lg p-6 sm:p-8 mb-8">
      <h2 className="text-3xl font-bold text-white mb-2">{selectedProject.name}</h2>
      <p className="text-gray-400 mb-4">{selectedProject.type}</p>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {selectedProject.images && selectedProject.images.map((img, index) => (
          <img key={index} src={img} alt={`${selectedProject.name} - ${index + 1}`} className="w-full h-48 object-cover rounded-md shadow-sm" />
        ))}
      </div>

      <p className="text-gray-300 leading-relaxed mb-6">{selectedProject.description}</p>

      <div className="flex flex-col sm:flex-row gap-4">
        <a
          href={selectedProject.liveUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="flex-1 text-center bg-blue-600 hover:bg-blue-700 transition-colors duration-200 text-white font-semibold py-3 px-6 rounded-lg shadow-md flex items-center justify-center gap-2"
        >
          <Lucide.Link className="w-5 h-5" />
          Ver en vivo
        </a>
        <a
          href={selectedProject.githubUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="flex-1 text-center bg-gray-600 hover:bg-gray-700 transition-colors duration-200 text-white font-semibold py-3 px-6 rounded-lg shadow-md flex items-center justify-center gap-2"
        >
          <Lucide.Github className="w-5 h-5" />
          GitHub
        </a>
      </div>
    </div>
  </div>
);

// --- Componente principal (App) ---
const App = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [selectedDeveloper, setSelectedDeveloper] = useState(null);
  const [selectedProject, setSelectedProject] = useState(null);
  const [developers, setDevelopers] = useState([]);
  const [projects, setProjects] = useState([]);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [supabaseClient, setSupabaseClient] = useState(null);

  // Inicialización de Supabase y autenticación
  useEffect(() => {
    // Espera a que la librería de Supabase esté disponible
    if (window.supabase && !supabaseClient) {
      const client = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      setSupabaseClient(client);
    }
  }, [supabaseClient]);

  useEffect(() => {
    if (!supabaseClient) return;
    
    async function getSession() {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session) {
        setUserId(session.user.id);
      } else {
        const { data, error } = await supabaseClient.auth.signInAnonymously();
        if (error) {
          console.error("Error signing in anonymously:", error);
        } else if (data.user) {
          setUserId(data.user.id);
        }
      }
      setIsAuthReady(true);
    }
    getSession();

    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange((event, session) => {
      setUserId(session?.user?.id || null);
    });

    return () => subscription.unsubscribe();
  }, [supabaseClient]);

  // Obtener datos de desarrolladores y proyectos de Supabase
  useEffect(() => {
    if (!isAuthReady || !supabaseClient) return;

    // Obtener datos de desarrolladores y suscribirse a cambios en tiempo real
    const fetchDevelopers = async () => {
      const { data, error } = await supabaseClient.from('developers').select('*');
      if (error) {
        console.error('Error fetching developers:', error);
      } else {
        setDevelopers(data);
      }
    };
    fetchDevelopers();

    const devSubscription = supabaseClient
      .from('developers')
      .on('POSTGRES_CHANGES', { event: '*', schema: 'public', table: 'developers' }, (payload) => {
        fetchDevelopers(); // Volvemos a buscar los datos para mantener el estado sincronizado
      })
      .subscribe();

    // Obtener datos de proyectos y suscribirse a cambios en tiempo real
    const fetchProjects = async () => {
      const { data, error } = await supabaseClient.from('projects').select('*');
      if (error) {
        console.error('Error fetching projects:', error);
      } else {
        setProjects(data);
      }
    };
    fetchProjects();

    const projSubscription = supabaseClient
      .from('projects')
      .on('POSTGRES_CHANGES', { event: '*', schema: 'public', table: 'projects' }, (payload) => {
        fetchProjects(); // Volvemos a buscar los datos para mantener el estado sincronizado
      })
      .subscribe();

    return () => {
      supabaseClient.removeSubscription(devSubscription);
      supabaseClient.removeSubscription(projSubscription);
    };
  }, [isAuthReady, supabaseClient]);

  const goToDeveloper = (developer) => {
    setSelectedDeveloper(developer);
    setCurrentPage('developer');
  };

  const goToProject = (project) => {
    setSelectedProject(project);
    setCurrentPage('project');
  };

  const goToHome = () => {
    setCurrentPage('home');
    setSelectedDeveloper(null);
    setSelectedProject(null);
  };

  const handleBackToDev = () => {
    setCurrentPage('developer');
    setSelectedProject(null);
  };

  return (
    <div className="min-h-screen bg-gray-900 font-sans antialiased text-white flex flex-col items-center p-4">
      {/* Carga la librería de Supabase desde un CDN */}
      <script src="https://unpkg.com/@supabase/supabase-js@latest/dist/umd/supabase.js"></script>
      {/* Tailwind CSS CDN and Font */}
      <script src="https://cdn.tailwindcss.com"></script>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" />
      <style>{`body { font-family: 'Inter', sans-serif; }`}</style>

      {/* Main content container */}
      <header className="w-full max-w-6xl text-center py-6 sm:py-8">
        <h1 className="text-4xl sm:text-5xl font-extrabold text-white">
          Portal de Portafolios
        </h1>
        {userId && (
          <div className="mt-2 text-sm text-gray-400">
            ID de Usuario: {userId}
          </div>
        )}
      </header>
      
      <main className="w-full max-w-6xl bg-gray-800 rounded-2xl shadow-xl border border-gray-700">
        {isAuthReady ? (
          <>
            {currentPage === 'home' && <Home developers={developers} goToDeveloper={goToDeveloper} />}
            {currentPage === 'developer' && selectedDeveloper && <DeveloperDetail selectedDeveloper={selectedDeveloper} projects={projects} goToHome={goToHome} goToProject={goToProject} />}
            {currentPage === 'project' && selectedProject && <ProjectDetail selectedProject={selectedProject} handleBackToDev={handleBackToDev} />}
          </>
        ) : (
          <div className="p-8 text-center text-gray-400">
            Cargando...
          </div>
        )}
      </main>
    </div>
  );
};

export default App;
